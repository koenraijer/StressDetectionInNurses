# If there is one, find its corresponding stress level and return it.
if (length(indices) > 0) {
return(tmp$Stress_level[indices[1]])
} else {
return(NA)
}
}
stats_df$stress <- apply(stats_df, 1, check_interval)
# tmp <- filter(survey_results, ID == substr(stats_df$src[1], 1, 2))
# which(interval(stats_df$start_time[1], stats_df$end_time[1]) %within% tmp$interval)
view(stats_df)
stats_df<- stats_df %>% mutate(stress =
ifelse(survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time),
ifelse(survey_results$Stress_level == 0, FALSE,
ifelse(is.na(survey_results$Stress_level), NA, TRUE)),
NA))
# OR
stats_df<- stats_df %>% mutate(stress =
ifelse(
(survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time))) == T,
ifelse(survey_results$Stress_level == 1 | survey_results$Stress_level == 2,
T,
F),
NA)
# stats_df<- stats_df %>% mutate(stress =
#   ifelse(survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time),
#     ifelse(survey_results$Stress_level == 0, FALSE,
#            ifelse(is.na(survey_results$Stress_level), NA, TRUE)),
#   NA))
#
# # OR
#
# stats_df<- stats_df %>% mutate(stress =
#   ifelse(
#     (survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time))) == T,
#     ifelse(survey_results$Stress_level == 1 | survey_results$Stress_level == 2,
#          T,
#          F),
#   NA)
# Filter survey on ID and date of recording
survey_5C <- survey_results %>% filter(ID == "5C", date == date(dt))
view(survey_5C)
# Establish date
dt <- date(stats_df$start_time[1])
sample_row <- survey_results %>% slice(1)
survey_results <- survey_results %>% mutate(interval = interval(survey_results$Start_time, survey_results$End_time))
class(survey_results$interval)
# stats_df<- stats_df %>% mutate(stress =
#   ifelse(survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time),
#     ifelse(survey_results$Stress_level == 0, FALSE,
#            ifelse(is.na(survey_results$Stress_level), NA, TRUE)),
#   NA))
#
# # OR
#
# stats_df<- stats_df %>% mutate(stress =
#   ifelse(
#     (survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time))) == T,
#     ifelse(survey_results$Stress_level == 1 | survey_results$Stress_level == 2,
#          T,
#          F),
#   NA)
# Establish date
dt <- date(stats_df$start_time[1])
# Filter survey on ID and date of recording
survey_5C <- survey_results %>% filter(ID == "5C", date == date(dt))
view(survey_5C)
# stats_df<- stats_df %>% mutate(stress =
#   ifelse(survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time),
#     ifelse(survey_results$Stress_level == 0, FALSE,
#            ifelse(is.na(survey_results$Stress_level), NA, TRUE)),
#   NA))
#
# # OR
#
# stats_df<- stats_df %>% mutate(stress =
#   ifelse(
#     (survey_results$interval %within% interval(stats_df$start_time, stats_df$end_time))) == T,
#     ifelse(survey_results$Stress_level == 1 | survey_results$Stress_level == 2,
#          T,
#          F),
#   NA)
# Establish date
dt <- date(stats_df$start_time[1])
# Filter survey on ID and date of recording
survey_5C <- survey_results %>% filter(ID == "5C", date == date(dt))
view(survey_5C)
?time
# Read in data
survey_results <- read_excel("input/SurveyResults.xlsx", na = "na")
# Add underscores to colnames
names(survey_results) <- gsub(pattern = " ", replacement="_", x = names(survey_results), fixed = T)
# Remove rows where Stress_level is NA
survey_results <- survey_results[!is.na(survey_results$Stress_level),]
# Add interval column to survey_results
survey_results <- survey_results %>% mutate(interval = interval(survey_results$Start_time, survey_results$End_time))
check_interval <- function(row) {
src_num <- which(names(stats_df) == "src")
start_time_num <- which(names(stats_df) == "start_time")
end_time_num <- which(names(stats_df) == "end_time")
# Filter survey_results for ID
tmp <- filter(survey_results, ID == substr(row[src_num], 1, 2))
# Find indices in tmp for which contain windows present in stats_df
indices <- which(time(interval(row[start_time_num], row[end_time_num])) %within% time(tmp$interval))
# If there is one, find its corresponding stress level and return it.
if (length(indices) > 0) {
return(tmp$Stress_level[indices[1]])
} else {
return(NA)
}
}
stats_df$stress <- apply(stats_df, 1, check_interval)
# Read in data
survey_results <- read_excel("input/SurveyResults.xlsx", na = "na")
# Add underscores to colnames
names(survey_results) <- gsub(pattern = " ", replacement="_", x = names(survey_results), fixed = T)
# Remove rows where Stress_level is NA
survey_results <- survey_results[!is.na(survey_results$Stress_level),]
# Add interval column to survey_results
survey_results <- survey_results %>% mutate(interval = interval(survey_results$Start_time, survey_results$End_time))
check_interval <- function(row) {
src_num <- which(names(stats_df) == "src")
start_time_num <- which(names(stats_df) == "start_time")
end_time_num <- which(names(stats_df) == "end_time")
# Filter survey_results for ID
tmp <- filter(survey_results, ID == substr(row[src_num], 1, 2))
# Find indices in tmp for which contain windows present in stats_df
indices <- which(interval(time(row[start_time_num]), time(row[end_time_num])) %within% time(tmp$interval))
# If there is one, find its corresponding stress level and return it.
if (length(indices) > 0) {
return(tmp$Stress_level[indices[1]])
} else {
return(NA)
}
}
stats_df$stress <- apply(stats_df, 1, check_interval)
time(survey_results$interval[1])
time(survey_results$interval[2])
time(survey_results$start_time[2])
time(survey_results$Start_time[2])
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
time <- time(timestamp)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
time <- time(timestamp)
time
?update.POSIXt
?update.Date()
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
time <- time(timestamp)
time <- update.Date(timestamp, "2020-01-04")
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
time <- time(timestamp)
time <- update(timestamp, "2020-01-04")
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
time <- time(timestamp)
time <- update.POSIXt(timestamp, "2020-01-04")
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
time <- as_hms(ymd_hms(ts))
?as_hms
library("tidyverse")
library("timetk")
library("readxl")
library("lubridate")
library("hms")
dir <- paste(getwd(), "/input", sep = "")
dir_list <- list.dirs(path = dir, full.names = F, recursive = F)
baseDir <- dir_list[2]
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
time <- as_hms(ymd_hms(ts))
library("tidyverse")
library("timetk")
library("readxl")
library("lubridate")
dir <- paste(getwd(), "/input", sep = "")
dir_list <- list.dirs(path = dir, full.names = F, recursive = F)
baseDir <- dir_list[2]
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
sprintf("%02d:%02d:%02d", hour(t), minute(t), second(t))
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
sprintf("%02d:%02d:%02d", hour(ts), minute(ts), second(ts))
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
sprintf("%02d:%02d:%02d", hour(ts), minute(ts), second(ts))
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
hour(ts)
?read_excel
library("tidyverse")
library("timetk")
library("readxl")
library("lubridate")
dir <- paste(getwd(), "/input", sep = "")
dir_list <- list.dirs(path = dir, full.names = F, recursive = F)
baseDir <- dir_list[2]
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
ts <- time(timestamp)
hour(ts)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
class(timestamp)
hour(ts)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
lubridate::hms(timestamp)
hour(ts)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
hms::hms(timestamp)
# Create a sample timestamp
timestamp <- ymd_hms(2022-01-01 13:45:00)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
hms::hms(timestamp)
# Create a sample timestamp
timestamp <- "2022-01-01 13:45:00"
# Extract the time component using the time function
hour(timestamp)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
hms::hms(timestamp)
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
hms::hms(as.numeric(timestamp))
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
hour(as.numeric(timestamp))
# Create a sample timestamp
timestamp <- ymd_hms("2022-01-01 13:45:00")
# Extract the time component using the time function
hms::hms(timestamp)
# create_time_series
#
# Input: bs_dir (STRING; base directory), data_src (STRING; HR, EDA, TEMP or ACC)
# Output: dataframe with data column and time column (for ACC, the data column contains average body acceleration)
create_time_series <- function(bs_dir, data_src) {
# Load csv
tmp <- read.csv(paste("input/", bs_dir, "/", data_src, ".csv", sep = ""))
if (data_src == "ACC") {
# Load csv
# Sampling rate
sr <- tmp[1,]
# Start time
dt <- as_datetime(as.numeric(gsub(pattern = "X", replacement = "", fixed = T, x = names(tmp))))
# Trim SR off
tmp <- tmp[-1,]
# Create time column
time <- seq(from = dt[1], by = seconds(1 / sr[[1]]), length.out = nrow(tmp))
tmp <- sqrt(tmp[,1]^2 + tmp[,2]^2 + tmp[,3]^2)
} else {
# Sampling rate
sr <- tmp[1,]
# Start time
dt <- as_datetime(as.numeric(gsub(pattern = "X", replacement = "", fixed = T, x = names(tmp))))
# Trim SR off
tmp <- tmp[-1,]
# Create time column
time <- seq(from = dt, by = seconds(1 / sr), length.out = length(tmp))
}
# Return dataframe
df <- data.frame(data_src = tmp, TIME = as_datetime(time), SRC = bs_dir)
names(df)[1] <- data_src
return(df)
}
# add_window_index
#
# Input: data_f (DATA.FRAME), window (in seconds), sr (sample rate in Hz)
add_window_index <- function(data_f, window, sr) {
# Calc no of time windows
no_tw <- (nrow(data_f) / sr) / window
data_f$WINDOW <- rep(1:(no_tw+1), each = window*sr, length.out = nrow(data_f))
# Trim of incomplete time windows
data_f <- data_f %>% filter(WINDOW <= no_tw)
return(data_f)
}
hr_ts <- create_time_series(baseDir, "HR")
library("tidyverse")
library("timetk")
library("readxl")
library("lubridate")
dir <- paste(getwd(), "/input", sep = "")
dir_list <- list.dirs(path = dir, full.names = F, recursive = F)
baseDir <- dir_list[2]
# create_time_series
#
# Input: bs_dir (STRING; base directory), data_src (STRING; HR, EDA, TEMP or ACC)
# Output: dataframe with data column and time column (for ACC, the data column contains average body acceleration)
create_time_series <- function(bs_dir, data_src) {
# Load csv
tmp <- read.csv(paste("input/", bs_dir, "/", data_src, ".csv", sep = ""))
if (data_src == "ACC") {
# Load csv
# Sampling rate
sr <- tmp[1,]
# Start time
dt <- as_datetime(as.numeric(gsub(pattern = "X", replacement = "", fixed = T, x = names(tmp))))
# Trim SR off
tmp <- tmp[-1,]
# Create time column
time <- seq(from = dt[1], by = seconds(1 / sr[[1]]), length.out = nrow(tmp))
tmp <- sqrt(tmp[,1]^2 + tmp[,2]^2 + tmp[,3]^2)
} else {
# Sampling rate
sr <- tmp[1,]
# Start time
dt <- as_datetime(as.numeric(gsub(pattern = "X", replacement = "", fixed = T, x = names(tmp))))
# Trim SR off
tmp <- tmp[-1,]
# Create time column
time <- seq(from = dt, by = seconds(1 / sr), length.out = length(tmp))
}
# Return dataframe
df <- data.frame(data_src = tmp, TIME = as_datetime(time), SRC = bs_dir)
names(df)[1] <- data_src
return(df)
}
# add_window_index
#
# Input: data_f (DATA.FRAME), window (in seconds), sr (sample rate in Hz)
add_window_index <- function(data_f, window, sr) {
# Calc no of time windows
no_tw <- (nrow(data_f) / sr) / window
data_f$WINDOW <- rep(1:(no_tw+1), each = window*sr, length.out = nrow(data_f))
# Trim of incomplete time windows
data_f <- data_f %>% filter(WINDOW <= no_tw)
return(data_f)
}
hr_ts <- create_time_series(baseDir, "HR")
eda_ts <- create_time_series(baseDir, "EDA")
temp_ts <- create_time_series(baseDir, "TEMP")
acc_ts <- create_time_series(baseDir, "ACC")
# Find max start time and trim all sources to start there
max_start_time <- max(acc_ts$TIME[1], hr_ts$TIME[1], eda_ts$TIME[1], temp_ts$TIME[1])
hr_ts <- hr_ts %>% filter(TIME >= max_start_time)
acc_ts <- acc_ts %>% filter(TIME >= max_start_time)
eda_ts <- eda_ts %>% filter(TIME >= max_start_time)
temp_ts <- temp_ts %>% filter(TIME >= max_start_time)
# Windowing the time series
window <- 60 # seconds
hr_ts <- add_window_index(hr_ts, window, 1)
acc_ts <- add_window_index(acc_ts, window, 32)
eda_ts <- add_window_index(eda_ts, window, 4)
temp_ts <- add_window_index(temp_ts, window, 4)
# Calculating rolling features per time window (50% overlap)
# Heart rate
sr <- 1
hr_stats <- hr_ts %>% group_by(WINDOW) %>% summarize(
start_time = min(TIME),
end_time = max(TIME),
hr_mean = rollapply(HR, width = ((window * sr) / 2), mean, partial = T, by = (window * sr)),
hr_sd = rollapply(HR, width = ((window * sr) / 2), sd, partial = T, by = (window * sr)),
hr_min = rollapply(HR, width = ((window * sr) / 2), min, partial = T, by = (window * sr)),
hr_max = rollapply(HR, width = ((window * sr) / 2), max, partial = T, by = (window * sr)),
)
?rollapply
library("tidyverse")
library("timetk")
library("readxl")
library("lubridate")
library("zoo")
dir <- paste(getwd(), "/input", sep = "")
dir_list <- list.dirs(path = dir, full.names = F, recursive = F)
baseDir <- dir_list[2]
hr_ts <- create_time_series(baseDir, "HR")
eda_ts <- create_time_series(baseDir, "EDA")
temp_ts <- create_time_series(baseDir, "TEMP")
acc_ts <- create_time_series(baseDir, "ACC")
# Find max start time and trim all sources to start there
max_start_time <- max(acc_ts$TIME[1], hr_ts$TIME[1], eda_ts$TIME[1], temp_ts$TIME[1])
hr_ts <- hr_ts %>% filter(TIME >= max_start_time)
acc_ts <- acc_ts %>% filter(TIME >= max_start_time)
eda_ts <- eda_ts %>% filter(TIME >= max_start_time)
temp_ts <- temp_ts %>% filter(TIME >= max_start_time)
# Windowing the time series
window <- 60 # seconds
hr_ts <- add_window_index(hr_ts, window, 1)
acc_ts <- add_window_index(acc_ts, window, 32)
eda_ts <- add_window_index(eda_ts, window, 4)
temp_ts <- add_window_index(temp_ts, window, 4)
# Calculating rolling features per time window (50% overlap)
# Heart rate
sr <- 1
hr_stats <- hr_ts %>% group_by(WINDOW) %>% summarize(
start_time = min(TIME),
end_time = max(TIME),
hr_mean = rollapply(HR, width = ((window * sr) / 2), mean, partial = T, by = (window * sr)),
hr_sd = rollapply(HR, width = ((window * sr) / 2), sd, partial = T, by = (window * sr)),
hr_min = rollapply(HR, width = ((window * sr) / 2), min, partial = T, by = (window * sr)),
hr_max = rollapply(HR, width = ((window * sr) / 2), max, partial = T, by = (window * sr)),
)
hr_stats <- hr_stats %>% mutate(hr_range = hr_max - hr_min, src = hr_ts$SRC[1])
# Body acceleration
sr <- 32
acc_stats <- acc_ts %>% group_by(WINDOW) %>% summarize(
start_time = min(TIME),
end_time = max(TIME),
acc_mean = rollapply(ACC, width = ((window * sr) / 2), mean, partial = T, by = (window * sr   )),
acc_sd = rollapply(ACC, width = ((window * sr) / 2), sd, partial = T, by = (window * sr)),
acc_min = rollapply(ACC, width = ((window * sr) / 2), min, partial = T, by = (window * sr    )),
acc_max = rollapply(ACC, width = ((window * sr) / 2), max, partial = T, by = (window * sr    )),
)
acc_stats <- acc_stats %>% mutate(acc_range = acc_max - acc_min, src = acc_ts$SRC[1])
# Electrodermal activity
sr <- 4
eda_stats <- eda_ts %>% group_by(WINDOW) %>% summarize(
start_time = min(TIME),
end_time = max(TIME),
eda_mean = rollapply(EDA, width = ((window * sr) / 2), mean, partial = T, by = (window * sr   )),
eda_sd = rollapply(EDA, width = ((window * sr) / 2), sd, partial = T, by = (window * sr)),
eda_min = rollapply(EDA, width = ((window * sr) / 2), min, partial = T, by = (window * sr    )),
eda_max = rollapply(EDA, width = ((window * sr) / 2), max, partial = T, by = (window * sr    )),
)
eda_stats <- eda_stats %>% mutate(eda_range = eda_max - eda_min, src = eda_ts$SRC[1])
# Skin Temperature
temp_stats <- temp_ts %>% group_by(WINDOW) %>% summarize(
start_time = min(TIME),
end_time = max(TIME),
temp_mean = rollapply(TEMP, width = ((window * sr) / 2), mean, partial = T, by = (window * sr   )),
temp_sd = rollapply(TEMP, width = ((window * sr) / 2), sd, partial = T, by = (window * sr)),
temp_min = rollapply(TEMP, width = ((window * sr) / 2), min, partial = T, by = (window * sr    )),
temp_max = rollapply(TEMP, width = ((window * sr) / 2), max, partial = T, by = (window * sr    )),
)
temp_stats <- temp_stats %>% mutate(temp_range = temp_max - temp_min, src = temp_ts$SRC[1])
stats_df <- bind_cols(hr_stats[,!(names(hr_stats) %in% c("src"))], acc_stats[,!(names(acc_stats) %in% c("WINDOW", "start_time", "end_time", "src"))], eda_stats[,!(names(eda_stats) %in% c("WINDOW", "start_time", "end_time", "src"))], temp_stats[,!(names(temp_stats) %in% c("WINDOW", "start_time", "end_time"))])
view(stats_df)
# Read in data
survey_results <- read_excel("input/SurveyResults.xlsx", na = "na")
# Add underscores to colnames
names(survey_results) <- gsub(pattern = " ", replacement="_", x = names(survey_results), fixed = T)
# Remove rows where Stress_level is NA
survey_results <- survey_results[!is.na(survey_results$Stress_level),]
# Add interval column to survey_results
survey_results <- survey_results %>% mutate(interval = interval(survey_results$Start_time, survey_results$End_time))
check_interval <- function(row) {
src_num <- which(names(stats_df) == "src")
start_time_num <- which(names(stats_df) == "start_time")
end_time_num <- which(names(stats_df) == "end_time")
# Filter survey_results for ID
tmp <- filter(survey_results, ID == substr(row[src_num], 1, 2))
# Find indices in tmp for which contain windows present in stats_df
indices <- which(interval(time(row[start_time_num]), time(row[end_time_num])) %within% time(tmp$interval))
# If there is one, find its corresponding stress level and return it.
if (length(indices) > 0) {
return(tmp$Stress_level[indices[1]])
} else {
return(NA)
}
}
stats_df$stress <- apply(stats_df, 1, check_interval)
# Read in data
survey_results <- read_excel("input/SurveyResults.xlsx", na = "na")
# Add underscores to colnames
names(survey_results) <- gsub(pattern = " ", replacement="_", x = names(survey_results), fixed = T)
# Remove rows where Stress_level is NA
survey_results <- survey_results[!is.na(survey_results$Stress_level),]
# Add interval column to survey_results
survey_results <- survey_results %>% mutate(interval = interval(survey_results$Start_time, survey_results$End_time))
check_interval <- function(row) {
src_num <- which(names(stats_df) == "src")
start_time_num <- which(names(stats_df) == "start_time")
end_time_num <- which(names(stats_df) == "end_time")
# Filter survey_results for ID
tmp <- filter(survey_results, ID == substr(row[src_num], 1, 2))
# Find indices in tmp for which contain windows present in stats_df
indices <- which(interval(time(row[start_time_num]), time(row[end_time_num])) %within% time(tmp$interval))
# If there is one, find its corresponding stress level and return it.
if (length(indices) > 0) {
return(tmp$Stress_level[indices[1]])
} else {
return(NA)
}
}
?%within%
?within
